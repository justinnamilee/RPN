#!/usr/bin/perl

(
    # tests
    '=='  => sub { if (RPN->stack->has(2)) { RPN->stack->push((RPN->stack->get(1) == RPN->stack->get(2)) ? TRUE : FALSE) } },
    '!='  => sub { if (RPN->stack->has(2)) { RPN->stack->push((RPN->stack->get(1) == RPN->stack->get(2)) ? FALSE : TRUE) } }, # lol
    '<'   => sub { if (RPN->stack->has(2)) { RPN->stack->push((RPN->stack->get(1)  < RPN->stack->get(2)) ? TRUE : FALSE) } },
    '>'   => sub { if (RPN->stack->has(2)) { RPN->stack->push((RPN->stack->get(1)  > RPN->stack->get(2)) ? TRUE : FALSE) } },
    '<='  => sub { if (RPN->stack->has(2)) { RPN->stack->push((RPN->stack->get(1) <= RPN->stack->get(2)) ? TRUE : FALSE) } },
    '>='  => sub { if (RPN->stack->has(2)) { RPN->stack->push((RPN->stack->get(1) >= RPN->stack->get(2)) ? TRUE : FALSE) } },
    # ternary ops
    '?'   => sub { if (RPN->stack->has(3)) { if (RPN->stack->pop) { my $k = RPN->stack->pop; RPN->stack->set(1, $k) } else { RPN->stack->pop } } },
    # binary ops
    '+'   => sub { if (RPN->stack->has(2)) { RPN->stack->push(RPN->stack->pop +  RPN->stack->pop) } }, 
    '/'   => sub { if (RPN->stack->has(2)) { RPN->stack->push(RPN->stack->pop /  RPN->stack->pop) } },
    '*'   => sub { if (RPN->stack->has(2)) { RPN->stack->push(RPN->stack->pop *  RPN->stack->pop) } },
    '-'   => sub { if (RPN->stack->has(2)) { RPN->stack->push(RPN->stack->pop -  RPN->stack->pop) } },
    '%'   => sub { if (RPN->stack->has(2)) { RPN->stack->push(RPN->stack->pop %  RPN->stack->pop) } },
    '**'  => sub { if (RPN->stack->has(2)) { RPN->stack->push(RPN->stack->pop ** RPN->stack->pop) } },
    '^'   => sub { if (RPN->stack->has(2)) { RPN->stack->push(RPN->stack->pop ^  RPN->stack->pop) } },
    '&'   => sub { if (RPN->stack->has(2)) { RPN->stack->push(RPN->stack->pop &  RPN->stack->pop) } },
    '|'   => sub { if (RPN->stack->has(2)) { RPN->stack->push(RPN->stack->pop |  RPN->stack->pop) } },
    '<<'  => sub { if (RPN->stack->has(2)) { RPN->stack->push(RPN->stack->pop << (RPN->stack->pop)) } }, # << is b0rk in vscode
    '>>'  => sub { if (RPN->stack->has(2)) { RPN->stack->push(RPN->stack->pop >> RPN->stack->pop) } }, # vvv safe boolean ops
    '&&'  => sub { if (RPN->stack->has(2)) { my ($a,$b) = (RPN->stack->pop, RPN->stack->pop); RPN->stack->push(bool2num($a && $b)) } },
    '||'  => sub { if (RPN->stack->has(2)) { my ($a,$b) = (RPN->stack->pop, RPN->stack->pop); RPN->stack->push(bool2num($a || $b)) } },
    # unary
    '++'  => sub { if (RPN->stack->has(1)) { RPN->stack->push(RPN->stack->pop + 1) } },
    '--'  => sub { if (RPN->stack->has(1)) { RPN->stack->push(RPN->stack->pop - 1) } },
    # functions
    pop   => sub { if (RPN->stack->has(1)) { RPN->stack->pop } },
    peek  => sub { if (RPN->stack->has(1)) { print q[peek> ]. RPN->stack->get(1) .qq[\n] } },
    stack => sub { print q[stack#> ]. RPN->stack->size .qq[\n] },
    dump  => sub { my $n = RPN->stack->size; foreach my $s (reverse RPN->stack->dump) { $n--; print qq[stack$n> $s\n]; } },
    flush => sub { RPN->stack->flush }, # toss it all
    empty => sub { RPN->stack->push(RPN->stack->empty) },
    load  => sub { RPN->register->load },
    lall  => sub { RPN->register->load while RPN->stack->size > 0 },
    mdmp  => sub { RPN->register->dump },
    step  => sub { RPN->register->step },
    noop  => undef,
    help  =>
    {
        '=='  => q[Test equality, push result to stack],
        '!='  => q[Test inequality, push result to stack],
        '<'   => q[Test less-than, push result to stack],
        '>'   => q[Test greater-than, push result to stack],
        '<='  => q[Test less-than-equals, push result to stack],
        '>='  => q[Test greater-than-equals, push result to stack],
        '?'   => q[Pop three stack items, push (FIRST ? SECOND : THIRD) to stack],
        '+'   => q[Pop two stack items, add them, push result to stack],
        '/'   => q[Pop two stack items, divide them, push the result to stack],
        '*'   => q[Pop two stack items, multiply them, push the result to stack],
        '-'   => q[Pop two stack items, subtract them, push the result to stack],
        '%'   => q[Pop two stack items, compute (FIRST % SECOND), push the result to the stack],
        '**'  => q[Pop two stack items, exponentiate them, push the result to the stack],
        '^'   => q[Pop two stack items, bitwise-xor them, push the result to the stack],
        '&'   => q[Pop two stack items, bitwise-and them, push the result to the stack],
        '|'   => q[Pop two stack items, bitwise-or them, push the result to the stack],
        '<<'  => q[Pop two stack items, bitwise-shift them left, push the result to the stack],
        '>>'  => q[Pop two stack items, bitwise-shift them right, push the result to the stack],
        '&&'  => q[Pop two stack items, logical-and them, push the result to the stack],
        '||'  => q[Pop two stack items, locical-or them, push the result to the stack],
        '++'  => q[Increment value on top of the stack],
        '--'  => q[Decrement value on top of the stack],
        pop   => q[Pop the stack],
        peek  => q[Peek at the top of the stack],
        stack => q[Show stack information],
        dump  => q[Dump the stack],
        flush => q[Flush the stack completely],
        empty => q[Test if the stack is empty, push the result to stack],
        load  => q[Pop the stack into the next memory location],
        lall  => q[Pop the stack into the next memory location until empty],
        step  => q[Step the register machine],
        noop  => q[NOOOOOOP]
    }
)
