#!/usr/bin/perl

# By: Justin Lee
# Date: QUANRANTINE 2020
#
# Description:
#   Yo dawg, this is an RPN calculator.
#   It does that kind of thing, you
#   know?

use lib q[./lib];
use strict;

use RPN::Constant; # needed
use RPN; # import the machine


  ######
  #   main::Loader
   #    Terminal IO?

# commands queue
my @command = @ARGV;

# config settings
my %config =
(
	# storage
	calculator  => q[./data/Calculator.rpn],
	computer    => q[./data/Computer.rpn],
	# reverse file input? (mem/rpn mode)
	reverse     => RPN::Constant->DEF_AUTO_REVERSE,
	# you want to talk to me?
	interactive => RPN::Constant->DEF_INTERACTIVE
);

# init the RPN calculator
RPN->prime(\%config);

# parse the input, load files as encountered
for (my $i = 0; $config{interactive} || $i < @command; (!$config{interactive}) && $i++)
{
	my $input = $command[$i];

	if ($config{interactive})
	{
		print RPN::Constant->PROMPT;
		chomp(my $text = <STDIN>);

		if ($text =~ /^%.+/ || -f $text) # skip spltting config and files
		{
			$input = $text;
		}
		else
		{
			my (@rem) = split(/\s+/, $text);

			if (@rem > 1)
			{
				$input = RPN::Constant->PROMPT_DISABLE; # vv stack em
				splice(@command, $i+1, 0, @rem, RPN::Constant->PROMPT_ENABLE);
			}
			else
			{
				($input) = @rem;
			}
		}
	}

	# if we're given files stack their input onto the queue
	if (-f $input)
	{
		if (open(my $fh, q[<], $input))
		{
			my (@c) = ();

			# line parse time
			while (<$fh>)
			{
				chomp;

				s/#.*//; # no comment
				s/^\s+//;
				s/\s+$//;

				if (/^%.+/ || -f) # skip spltting config and files
				{
					push(@c, $_);
				}
				else
				{
					push(@c, split);
				}
			}

			# excuse me, pardon me; em nodrap, em esucxe?
			splice(@command, $i+1, 0, ($config{reverse} ? reverse(@c) : @c));
		}
		else
		{
			# TODO: add 'ask to continue mode'
			warn qq[Skipping file '$input': $!];
		}
	}
	elsif ($input =~ /^%\s*(.+?)\s*(?:=>\s*(.+))?$/)
	{
		my ($key, $val) = ($1, $2);

		$config{$key} = $val if (defined($val));

		print qq[config:$key> $config{$key}\n];
	}
	else
	{
		RPN::execute($input);
	}
}


exit 0;
